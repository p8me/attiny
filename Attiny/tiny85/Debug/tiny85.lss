
tiny85.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000073c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  0000073c  000007d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  0080008a  0080008a  000007fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000082c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b52  00000000  00000000  000009a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000601  00000000  00000000  000014fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000858  00000000  00000000  00001afb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f0  00000000  00000000  00002354  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e5  00000000  00000000  00002644  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000561  00000000  00000000  00002a29  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00002f8a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	11 c1       	rjmp	.+546    	; 0x22c <__vector_4>
   a:	89 c0       	rjmp	.+274    	; 0x11e <__vector_5>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	41 c0       	rjmp	.+130    	; 0x9c <__vector_12>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	ec e3       	ldi	r30, 0x3C	; 60
  32:	f7 e0       	ldi	r31, 0x07	; 7
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	aa 38       	cpi	r26, 0x8A	; 138
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	aa e8       	ldi	r26, 0x8A	; 138
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	af 3a       	cpi	r26, 0xAF	; 175
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	0a d0       	rcall	.+20     	; 0x66 <main>
  52:	72 c3       	rjmp	.+1764   	; 0x738 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <adc_init>:
                              GND -|4--------5|- PB0 (MOSI/DI/SDA/AIN0/OC0A/OC1A/AREF/PCINT0)  */
const uint8_t adc_pin_2_ch[] = {-1, -1, 1, 3, 2, 0};
#define ADC_PIN_2_CH(x) adc_pin_2_ch[x]

void adc_init(void){
	ADMUX = _BV(ADLAR);// + _BV(ADC_INT_1V1); // MUX
  56:	80 e2       	ldi	r24, 0x20	; 32
  58:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 1; // 2^1 PRESC
  5a:	81 e0       	ldi	r24, 0x01	; 1
  5c:	86 b9       	out	0x06, r24	; 6
  5e:	08 95       	ret

00000060 <dbg_tx_init>:
		dbg_putchar(str[i]);
	}
}

void dbg_tx_init(){
	DBG_UART_TX_PORT |= (1 << DBG_UART_TX_PIN);
  60:	c2 9a       	sbi	0x18, 2	; 24
	DBG_UART_TX_DDR |= (1 << DBG_UART_TX_PIN);
  62:	ba 9a       	sbi	0x17, 2	; 23
  64:	08 95       	ret

00000066 <main>:


int main(void)
{
	#if(!TINY13)
	dbg_tx_init();
  66:	fc df       	rcall	.-8      	; 0x60 <dbg_tx_init>
	#endif

	// ============= Clock ================
	CLKPR = _BV(CLKPCE); CLKPR = CPU_PRESC;
  68:	80 e8       	ldi	r24, 0x80	; 128
  6a:	86 bd       	out	0x26, r24	; 38
  6c:	16 bc       	out	0x26, r1	; 38

	// ========== Enable Sleep ============
#if WDT
	set_bit(MCUCR, SM1); // incompatible with PWM
  6e:	85 b7       	in	r24, 0x35	; 53
  70:	80 61       	ori	r24, 0x10	; 16
  72:	85 bf       	out	0x35, r24	; 53
#endif
	init();
  74:	d0 d1       	rcall	.+928    	; 0x416 <init>

	while(1){
#if WDT
		sleep_cpu();
  76:	88 95       	sleep
		if (wdt_timeout_happened()) wdt_event();
  78:	0b d0       	rcall	.+22     	; 0x90 <wdt_timeout_happened>
  7a:	81 11       	cpse	r24, r1
  7c:	ca d1       	rcall	.+916    	; 0x412 <wdt_event>
#endif
		loop();
  7e:	ca d1       	rcall	.+916    	; 0x414 <loop>
	}
  80:	fa cf       	rjmp	.-12     	; 0x76 <main+0x10>

00000082 <wdt_setup>:
#endif

volatile uint32_t ts = 0; // timestamp

void wdt_setup(){
	MCUCR |= _BV(SE); // Enable sleep mode
  82:	85 b7       	in	r24, 0x35	; 53
  84:	80 62       	ori	r24, 0x20	; 32
  86:	85 bf       	out	0x35, r24	; 53
	sei();
  88:	78 94       	sei
	#if FIXED_WDT_PER
	WDTCR = _BV(WDIE) + FIXED_WDT_PER;
  8a:	82 e4       	ldi	r24, 0x42	; 66
  8c:	81 bd       	out	0x21, r24	; 33
  8e:	08 95       	ret

00000090 <wdt_timeout_happened>:


bool wdt_event_f = false;

bool wdt_timeout_happened(void){
	if (wdt_event_f){
  90:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__data_end>
  94:	81 11       	cpse	r24, r1
		wdt_event_f = 0;
  96:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__data_end>
		return 1;
	}
	return 0;
}
  9a:	08 95       	ret

0000009c <__vector_12>:

#if WDT

ISR(WDT_vect){
  9c:	1f 92       	push	r1
  9e:	0f 92       	push	r0
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	0f 92       	push	r0
  a4:	11 24       	eor	r1, r1
  a6:	8f 93       	push	r24
  a8:	9f 93       	push	r25
  aa:	af 93       	push	r26
  ac:	bf 93       	push	r27
	ts += wdt_per_ts;
  ae:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <ts>
  b2:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <ts+0x1>
  b6:	a0 91 8d 00 	lds	r26, 0x008D	; 0x80008d <ts+0x2>
  ba:	b0 91 8e 00 	lds	r27, 0x008E	; 0x80008e <ts+0x3>
  be:	04 96       	adiw	r24, 0x04	; 4
  c0:	a1 1d       	adc	r26, r1
  c2:	b1 1d       	adc	r27, r1
  c4:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <ts>
  c8:	90 93 8c 00 	sts	0x008C, r25	; 0x80008c <ts+0x1>
  cc:	a0 93 8d 00 	sts	0x008D, r26	; 0x80008d <ts+0x2>
  d0:	b0 93 8e 00 	sts	0x008E, r27	; 0x80008e <ts+0x3>
	wdt_event_f = true;
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__data_end>
}
  da:	bf 91       	pop	r27
  dc:	af 91       	pop	r26
  de:	9f 91       	pop	r25
  e0:	8f 91       	pop	r24
  e2:	0f 90       	pop	r0
  e4:	0f be       	out	0x3f, r0	; 63
  e6:	0f 90       	pop	r0
  e8:	1f 90       	pop	r1
  ea:	18 95       	reti

000000ec <disable_deep_sleep>:

void disable_deep_sleep(void){
	clr_bit(MCUCR, SM1); // Disable deep sleep (CPU usage jumps from 5uA tp 800uA)
  ec:	85 b7       	in	r24, 0x35	; 53
  ee:	8f 7e       	andi	r24, 0xEF	; 239
  f0:	85 bf       	out	0x35, r24	; 53
  f2:	08 95       	ret

000000f4 <music_init>:
	else TCCR1 = 0;
}


void music_init(void){
	TIMSK = _BV(TOIE0) | _BV(TOIE1);
  f4:	86 e0       	ldi	r24, 0x06	; 6
  f6:	89 bf       	out	0x39, r24	; 57
	DDRB |= _BV(TONE_PIN[0]) | _BV(TONE_PIN[1]);
  f8:	87 b3       	in	r24, 0x17	; 23
  fa:	83 60       	ori	r24, 0x03	; 3
  fc:	87 bb       	out	0x17, r24	; 23
	disable_deep_sleep();
  fe:	f6 cf       	rjmp	.-20     	; 0xec <disable_deep_sleep>

00000100 <set_timer>:
	tone_on[idx] = start;
	tone_slope[idx] = slope;
}

void set_timer(uint8_t idx, uint16_t time){
	goal_ovf[idx] = (time >> 8);
 100:	e8 2f       	mov	r30, r24
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	ee 0f       	add	r30, r30
 106:	ff 1f       	adc	r31, r31
 108:	e1 56       	subi	r30, 0x61	; 97
 10a:	ff 4f       	sbci	r31, 0xFF	; 255
 10c:	70 83       	st	Z, r23
 10e:	11 82       	std	Z+1, r1	; 0x01
	uint8_t tmp = 255 - (time % 256);
 110:	60 95       	com	r22
	if (idx == 0) TCNT0 = tmp;
 112:	81 11       	cpse	r24, r1
 114:	02 c0       	rjmp	.+4      	; 0x11a <set_timer+0x1a>
 116:	62 bf       	out	0x32, r22	; 50
 118:	08 95       	ret
	else TCNT1 = tmp;
 11a:	6f bd       	out	0x2f, r22	; 47
 11c:	08 95       	ret

0000011e <__vector_5>:
		}
		tone_flag[idx] = !tone_flag[idx];
	}
}

ISR(TIM0_OVF_vect){
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	cf 92       	push	r12
 12a:	df 92       	push	r13
 12c:	ef 92       	push	r14
 12e:	ff 92       	push	r15
 130:	2f 93       	push	r18
 132:	3f 93       	push	r19
 134:	4f 93       	push	r20
 136:	5f 93       	push	r21
 138:	6f 93       	push	r22
 13a:	7f 93       	push	r23
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	ef 93       	push	r30
 146:	ff 93       	push	r31
	if (idx == 0) TCNT0 = tmp;
	else TCNT1 = tmp;
}

inline void tone_isr(uint8_t idx){
	if (goal_ovf[idx] > 0) goal_ovf[idx]--;
 148:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <goal_ovf>
 14c:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <goal_ovf+0x1>
 150:	00 97       	sbiw	r24, 0x00	; 0
 152:	31 f0       	breq	.+12     	; 0x160 <__vector_5+0x42>
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <goal_ovf+0x1>
 15a:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <goal_ovf>
 15e:	51 c0       	rjmp	.+162    	; 0x202 <__vector_5+0xe4>
	else{ // timer expired
		if (tone_flag[idx]){
 160:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <tone_flag>
 164:	88 23       	and	r24, r24
 166:	89 f0       	breq	.+34     	; 0x18a <__vector_5+0x6c>
			set_timer(idx, tone_on[idx]);
 168:	60 91 a5 00 	lds	r22, 0x00A5	; 0x8000a5 <tone_on>
 16c:	70 91 a6 00 	lds	r23, 0x00A6	; 0x8000a6 <tone_on+0x1>
 170:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <tone_on+0x2>
 174:	90 91 a8 00 	lds	r25, 0x00A8	; 0x8000a8 <tone_on+0x3>
 178:	ba d1       	rcall	.+884    	; 0x4ee <__fixunssfsi>
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	c1 df       	rcall	.-126    	; 0x100 <set_timer>
			set_pin_to(TONE_PIN[idx], 0);
 17e:	88 b3       	in	r24, 0x18	; 24
 180:	98 b3       	in	r25, 0x18	; 24
 182:	81 70       	andi	r24, 0x01	; 1
 184:	89 27       	eor	r24, r25
 186:	88 bb       	out	0x18, r24	; 24
 188:	36 c0       	rjmp	.+108    	; 0x1f6 <__vector_5+0xd8>
		}
		else{
			set_timer(idx, tone_on[idx]);
 18a:	60 91 a5 00 	lds	r22, 0x00A5	; 0x8000a5 <tone_on>
 18e:	70 91 a6 00 	lds	r23, 0x00A6	; 0x8000a6 <tone_on+0x1>
 192:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <tone_on+0x2>
 196:	90 91 a8 00 	lds	r25, 0x00A8	; 0x8000a8 <tone_on+0x3>
 19a:	a9 d1       	rcall	.+850    	; 0x4ee <__fixunssfsi>
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	b0 df       	rcall	.-160    	; 0x100 <set_timer>
			set_pin_to(TONE_PIN[idx], 1);
 1a0:	98 b3       	in	r25, 0x18	; 24
 1a2:	28 b3       	in	r18, 0x18	; 24
 1a4:	89 2f       	mov	r24, r25
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	80 95       	com	r24
 1aa:	90 95       	com	r25
 1ac:	81 70       	andi	r24, 0x01	; 1
 1ae:	99 27       	eor	r25, r25
 1b0:	82 27       	eor	r24, r18
 1b2:	88 bb       	out	0x18, r24	; 24
			//tone_on[idx] *= 1.001;
			tone_on[idx] += tone_on[idx]*tone_on[idx]*tone_slope[idx];
 1b4:	c0 90 a5 00 	lds	r12, 0x00A5	; 0x8000a5 <tone_on>
 1b8:	d0 90 a6 00 	lds	r13, 0x00A6	; 0x8000a6 <tone_on+0x1>
 1bc:	e0 90 a7 00 	lds	r14, 0x00A7	; 0x8000a7 <tone_on+0x2>
 1c0:	f0 90 a8 00 	lds	r15, 0x00A8	; 0x8000a8 <tone_on+0x3>
 1c4:	a7 01       	movw	r20, r14
 1c6:	96 01       	movw	r18, r12
 1c8:	c7 01       	movw	r24, r14
 1ca:	b6 01       	movw	r22, r12
 1cc:	4a d2       	rcall	.+1172   	; 0x662 <__mulsf3>
 1ce:	20 91 97 00 	lds	r18, 0x0097	; 0x800097 <tone_slope>
 1d2:	30 91 98 00 	lds	r19, 0x0098	; 0x800098 <tone_slope+0x1>
 1d6:	40 91 99 00 	lds	r20, 0x0099	; 0x800099 <tone_slope+0x2>
 1da:	50 91 9a 00 	lds	r21, 0x009A	; 0x80009a <tone_slope+0x3>
 1de:	41 d2       	rcall	.+1154   	; 0x662 <__mulsf3>
 1e0:	a7 01       	movw	r20, r14
 1e2:	96 01       	movw	r18, r12
 1e4:	20 d1       	rcall	.+576    	; 0x426 <__addsf3>
 1e6:	60 93 a5 00 	sts	0x00A5, r22	; 0x8000a5 <tone_on>
 1ea:	70 93 a6 00 	sts	0x00A6, r23	; 0x8000a6 <tone_on+0x1>
 1ee:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <tone_on+0x2>
 1f2:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <tone_on+0x3>
		}
		tone_flag[idx] = !tone_flag[idx];
 1f6:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <tone_flag>
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	89 27       	eor	r24, r25
 1fe:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <tone_flag>
	}
}

ISR(TIM0_OVF_vect){
	tone_isr(0);
}
 202:	ff 91       	pop	r31
 204:	ef 91       	pop	r30
 206:	bf 91       	pop	r27
 208:	af 91       	pop	r26
 20a:	9f 91       	pop	r25
 20c:	8f 91       	pop	r24
 20e:	7f 91       	pop	r23
 210:	6f 91       	pop	r22
 212:	5f 91       	pop	r21
 214:	4f 91       	pop	r20
 216:	3f 91       	pop	r19
 218:	2f 91       	pop	r18
 21a:	ff 90       	pop	r15
 21c:	ef 90       	pop	r14
 21e:	df 90       	pop	r13
 220:	cf 90       	pop	r12
 222:	0f 90       	pop	r0
 224:	0f be       	out	0x3f, r0	; 63
 226:	0f 90       	pop	r0
 228:	1f 90       	pop	r1
 22a:	18 95       	reti

0000022c <__vector_4>:

ISR(TIM1_OVF_vect){
 22c:	1f 92       	push	r1
 22e:	0f 92       	push	r0
 230:	0f b6       	in	r0, 0x3f	; 63
 232:	0f 92       	push	r0
 234:	11 24       	eor	r1, r1
 236:	cf 92       	push	r12
 238:	df 92       	push	r13
 23a:	ef 92       	push	r14
 23c:	ff 92       	push	r15
 23e:	2f 93       	push	r18
 240:	3f 93       	push	r19
 242:	4f 93       	push	r20
 244:	5f 93       	push	r21
 246:	6f 93       	push	r22
 248:	7f 93       	push	r23
 24a:	8f 93       	push	r24
 24c:	9f 93       	push	r25
 24e:	af 93       	push	r26
 250:	bf 93       	push	r27
 252:	ef 93       	push	r30
 254:	ff 93       	push	r31
	if (idx == 0) TCNT0 = tmp;
	else TCNT1 = tmp;
}

inline void tone_isr(uint8_t idx){
	if (goal_ovf[idx] > 0) goal_ovf[idx]--;
 256:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <goal_ovf+0x2>
 25a:	90 91 a2 00 	lds	r25, 0x00A2	; 0x8000a2 <goal_ovf+0x3>
 25e:	00 97       	sbiw	r24, 0x00	; 0
 260:	31 f0       	breq	.+12     	; 0x26e <__stack+0xf>
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	90 93 a2 00 	sts	0x00A2, r25	; 0x8000a2 <goal_ovf+0x3>
 268:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <goal_ovf+0x2>
 26c:	51 c0       	rjmp	.+162    	; 0x310 <__stack+0xb1>
	else{ // timer expired
		if (tone_flag[idx]){
 26e:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <tone_flag+0x1>
 272:	88 23       	and	r24, r24
 274:	89 f0       	breq	.+34     	; 0x298 <__stack+0x39>
			set_timer(idx, tone_on[idx]);
 276:	60 91 a9 00 	lds	r22, 0x00A9	; 0x8000a9 <tone_on+0x4>
 27a:	70 91 aa 00 	lds	r23, 0x00AA	; 0x8000aa <tone_on+0x5>
 27e:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <tone_on+0x6>
 282:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <tone_on+0x7>
 286:	33 d1       	rcall	.+614    	; 0x4ee <__fixunssfsi>
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	3a df       	rcall	.-396    	; 0x100 <set_timer>
			set_pin_to(TONE_PIN[idx], 0);
 28c:	88 b3       	in	r24, 0x18	; 24
 28e:	98 b3       	in	r25, 0x18	; 24
 290:	82 70       	andi	r24, 0x02	; 2
 292:	89 27       	eor	r24, r25
 294:	88 bb       	out	0x18, r24	; 24
 296:	36 c0       	rjmp	.+108    	; 0x304 <__stack+0xa5>
		}
		else{
			set_timer(idx, tone_on[idx]);
 298:	60 91 a9 00 	lds	r22, 0x00A9	; 0x8000a9 <tone_on+0x4>
 29c:	70 91 aa 00 	lds	r23, 0x00AA	; 0x8000aa <tone_on+0x5>
 2a0:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <tone_on+0x6>
 2a4:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <tone_on+0x7>
 2a8:	22 d1       	rcall	.+580    	; 0x4ee <__fixunssfsi>
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	29 df       	rcall	.-430    	; 0x100 <set_timer>
			set_pin_to(TONE_PIN[idx], 1);
 2ae:	98 b3       	in	r25, 0x18	; 24
 2b0:	28 b3       	in	r18, 0x18	; 24
 2b2:	89 2f       	mov	r24, r25
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	80 95       	com	r24
 2b8:	90 95       	com	r25
 2ba:	82 70       	andi	r24, 0x02	; 2
 2bc:	99 27       	eor	r25, r25
 2be:	82 27       	eor	r24, r18
 2c0:	88 bb       	out	0x18, r24	; 24
			//tone_on[idx] *= 1.001;
			tone_on[idx] += tone_on[idx]*tone_on[idx]*tone_slope[idx];
 2c2:	c0 90 a9 00 	lds	r12, 0x00A9	; 0x8000a9 <tone_on+0x4>
 2c6:	d0 90 aa 00 	lds	r13, 0x00AA	; 0x8000aa <tone_on+0x5>
 2ca:	e0 90 ab 00 	lds	r14, 0x00AB	; 0x8000ab <tone_on+0x6>
 2ce:	f0 90 ac 00 	lds	r15, 0x00AC	; 0x8000ac <tone_on+0x7>
 2d2:	a7 01       	movw	r20, r14
 2d4:	96 01       	movw	r18, r12
 2d6:	c7 01       	movw	r24, r14
 2d8:	b6 01       	movw	r22, r12
 2da:	c3 d1       	rcall	.+902    	; 0x662 <__mulsf3>
 2dc:	20 91 9b 00 	lds	r18, 0x009B	; 0x80009b <tone_slope+0x4>
 2e0:	30 91 9c 00 	lds	r19, 0x009C	; 0x80009c <tone_slope+0x5>
 2e4:	40 91 9d 00 	lds	r20, 0x009D	; 0x80009d <tone_slope+0x6>
 2e8:	50 91 9e 00 	lds	r21, 0x009E	; 0x80009e <tone_slope+0x7>
 2ec:	ba d1       	rcall	.+884    	; 0x662 <__mulsf3>
 2ee:	a7 01       	movw	r20, r14
 2f0:	96 01       	movw	r18, r12
 2f2:	99 d0       	rcall	.+306    	; 0x426 <__addsf3>
 2f4:	60 93 a9 00 	sts	0x00A9, r22	; 0x8000a9 <tone_on+0x4>
 2f8:	70 93 aa 00 	sts	0x00AA, r23	; 0x8000aa <tone_on+0x5>
 2fc:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <tone_on+0x6>
 300:	90 93 ac 00 	sts	0x00AC, r25	; 0x8000ac <tone_on+0x7>
		}
		tone_flag[idx] = !tone_flag[idx];
 304:	90 91 a4 00 	lds	r25, 0x00A4	; 0x8000a4 <tone_flag+0x1>
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	89 27       	eor	r24, r25
 30c:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <tone_flag+0x1>
	tone_isr(0);
}

ISR(TIM1_OVF_vect){
	tone_isr(1);
}
 310:	ff 91       	pop	r31
 312:	ef 91       	pop	r30
 314:	bf 91       	pop	r27
 316:	af 91       	pop	r26
 318:	9f 91       	pop	r25
 31a:	8f 91       	pop	r24
 31c:	7f 91       	pop	r23
 31e:	6f 91       	pop	r22
 320:	5f 91       	pop	r21
 322:	4f 91       	pop	r20
 324:	3f 91       	pop	r19
 326:	2f 91       	pop	r18
 328:	ff 90       	pop	r15
 32a:	ef 90       	pop	r14
 32c:	df 90       	pop	r13
 32e:	cf 90       	pop	r12
 330:	0f 90       	pop	r0
 332:	0f be       	out	0x3f, r0	; 63
 334:	0f 90       	pop	r0
 336:	1f 90       	pop	r1
 338:	18 95       	reti

0000033a <draw_sound_words>:

uint16_t tone1_idx = 0, tone2_idx = 0, tone1_dur = 0, tone2_dur = 0;

#define DL(TIME)  {_delay_ms(TIME*100);}

void draw_sound_words(void){
 33a:	cf 92       	push	r12
 33c:	df 92       	push	r13
 33e:	ef 92       	push	r14
 340:	ff 92       	push	r15

	if (tone1_dur == 0){
 342:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <tone1_dur>
 346:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <tone1_dur+0x1>
 34a:	00 97       	sbiw	r24, 0x00	; 0
 34c:	09 f0       	breq	.+2      	; 0x350 <draw_sound_words+0x16>
 34e:	57 c0       	rjmp	.+174    	; 0x3fe <draw_sound_words+0xc4>
		if (tone1_idx == sizeof(tone1)/sizeof(uint16_t))
 350:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <tone1_idx>
 354:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <tone1_idx+0x1>
 358:	06 97       	sbiw	r24, 0x06	; 6
 35a:	61 f4       	brne	.+24     	; 0x374 <draw_sound_words+0x3a>
		{tone1_idx = 0; tone2_idx = 0; tone1_dur = 0; tone2_dur = 0;}
 35c:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <tone1_idx+0x1>
 360:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <tone1_idx>
 364:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <tone2_idx+0x1>
 368:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <tone2_idx>
 36c:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <tone2_dur+0x1>
 370:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <tone2_dur>
		
		if (tone1[tone1_idx]) {
 374:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <tone1_idx>
 378:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <tone1_idx+0x1>
 37c:	fc 01       	movw	r30, r24
 37e:	ee 0f       	add	r30, r30
 380:	ff 1f       	adc	r31, r31
 382:	e2 58       	subi	r30, 0x82	; 130
 384:	ff 4f       	sbci	r31, 0xFF	; 255
 386:	60 81       	ld	r22, Z
 388:	71 81       	ldd	r23, Z+1	; 0x01
 38a:	61 15       	cp	r22, r1
 38c:	71 05       	cpc	r23, r1
 38e:	09 f1       	breq	.+66     	; 0x3d2 <draw_sound_words+0x98>
			Draw(0, tone1[tone1_idx], tone1_slope[tone1_idx]);
 390:	88 0f       	add	r24, r24
 392:	99 1f       	adc	r25, r25
 394:	88 0f       	add	r24, r24
 396:	99 1f       	adc	r25, r25
 398:	fc 01       	movw	r30, r24
 39a:	ea 59       	subi	r30, 0x9A	; 154
 39c:	ff 4f       	sbci	r31, 0xFF	; 255
 39e:	c0 80       	ld	r12, Z
 3a0:	d1 80       	ldd	r13, Z+1	; 0x01
 3a2:	e2 80       	ldd	r14, Z+2	; 0x02
 3a4:	f3 80       	ldd	r15, Z+3	; 0x03
uint16_t goal_ovf[2] = {0};
float tone_slope[2] = {0};
bool tone_flag[2], dir[2];

static void Draw(uint8_t idx, uint16_t start, float slope){
	tone_on[idx] = start;
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	cd d0       	rcall	.+410    	; 0x546 <__floatunsisf>
 3ac:	60 93 a5 00 	sts	0x00A5, r22	; 0x8000a5 <tone_on>
 3b0:	70 93 a6 00 	sts	0x00A6, r23	; 0x8000a6 <tone_on+0x1>
 3b4:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <tone_on+0x2>
 3b8:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <tone_on+0x3>
	tone_slope[idx] = slope;
 3bc:	c0 92 97 00 	sts	0x0097, r12	; 0x800097 <tone_slope>
 3c0:	d0 92 98 00 	sts	0x0098, r13	; 0x800098 <tone_slope+0x1>
 3c4:	e0 92 99 00 	sts	0x0099, r14	; 0x800099 <tone_slope+0x2>
 3c8:	f0 92 9a 00 	sts	0x009A, r15	; 0x80009a <tone_slope+0x3>
#if (!TINY13)

const uint8_t TONE_PIN[2] = {0, 1};

void start_tone(uint8_t idx){
	if (idx == 0) TCCR0B = 2; // presc=8 -> 1MHz
 3cc:	82 e0       	ldi	r24, 0x02	; 2
 3ce:	83 bf       	out	0x33, r24	; 51
 3d0:	01 c0       	rjmp	.+2      	; 0x3d4 <draw_sound_words+0x9a>
	else TCCR1 = 4; // presc=8 -> 1MHz
}

void stop_tone(uint8_t idx){
	if (idx == 0) TCCR0B = 0;
 3d2:	13 be       	out	0x33, r1	; 51
		if (tone1[tone1_idx]) {
			Draw(0, tone1[tone1_idx], tone1_slope[tone1_idx]);
			start_tone(0);
		}
		else stop_tone(0);
		tone1_dur = tone1_duration[tone1_idx] - 1;
 3d4:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <tone1_idx>
 3d8:	30 91 96 00 	lds	r19, 0x0096	; 0x800096 <tone1_idx+0x1>
 3dc:	f9 01       	movw	r30, r18
 3de:	e0 5a       	subi	r30, 0xA0	; 160
 3e0:	ff 4f       	sbci	r31, 0xFF	; 255
 3e2:	80 81       	ld	r24, Z
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	01 97       	sbiw	r24, 0x01	; 1
 3e8:	90 93 92 00 	sts	0x0092, r25	; 0x800092 <tone1_dur+0x1>
 3ec:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <tone1_dur>
		tone1_idx++;
 3f0:	2f 5f       	subi	r18, 0xFF	; 255
 3f2:	3f 4f       	sbci	r19, 0xFF	; 255
 3f4:	30 93 96 00 	sts	0x0096, r19	; 0x800096 <tone1_idx+0x1>
 3f8:	20 93 95 00 	sts	0x0095, r18	; 0x800095 <tone1_idx>
 3fc:	05 c0       	rjmp	.+10     	; 0x408 <__FUSE_REGION_LENGTH__+0x8>
	}
	else tone1_dur--;
 3fe:	01 97       	sbiw	r24, 0x01	; 1
 400:	90 93 92 00 	sts	0x0092, r25	; 0x800092 <tone1_dur+0x1>
 404:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <tone1_dur>
		else stop_tone(1);
		tone2_dur = tone2_duration[tone2_idx] - 1;
		tone2_idx++;
	}
	else tone2_dur--;
}
 408:	ff 90       	pop	r15
 40a:	ef 90       	pop	r14
 40c:	df 90       	pop	r13
 40e:	cf 90       	pop	r12
 410:	08 95       	ret

00000412 <wdt_event>:
		//set_pin(VIB_MOT);
	//},
	//{
		//clr_pin(VIB_MOT);
	//});
	draw_sound_words();
 412:	93 cf       	rjmp	.-218    	; 0x33a <draw_sound_words>

00000414 <loop>:
}


void loop(void){
 414:	08 95       	ret

00000416 <init>:
	
}

void init(){
	OUT_PINS(ADC_DRIVE_PIN, 0);
 416:	87 b3       	in	r24, 0x17	; 23
 418:	89 60       	ori	r24, 0x09	; 9
 41a:	87 bb       	out	0x17, r24	; 23
	HIGH_PINS(ADC_DRIVE_PIN);
 41c:	c3 9a       	sbi	0x18, 3	; 24
	
	adc_init();
 41e:	1b de       	rcall	.-970    	; 0x56 <adc_init>
	wdt_setup();
 420:	30 de       	rcall	.-928    	; 0x82 <wdt_setup>
	music_init();
 422:	68 ce       	rjmp	.-816    	; 0xf4 <music_init>

00000424 <__subsf3>:
 424:	50 58       	subi	r21, 0x80	; 128

00000426 <__addsf3>:
 426:	bb 27       	eor	r27, r27
 428:	aa 27       	eor	r26, r26
 42a:	0e d0       	rcall	.+28     	; 0x448 <__addsf3x>
 42c:	e0 c0       	rjmp	.+448    	; 0x5ee <__fp_round>
 42e:	d1 d0       	rcall	.+418    	; 0x5d2 <__fp_pscA>
 430:	30 f0       	brcs	.+12     	; 0x43e <__addsf3+0x18>
 432:	d6 d0       	rcall	.+428    	; 0x5e0 <__fp_pscB>
 434:	20 f0       	brcs	.+8      	; 0x43e <__addsf3+0x18>
 436:	31 f4       	brne	.+12     	; 0x444 <__addsf3+0x1e>
 438:	9f 3f       	cpi	r25, 0xFF	; 255
 43a:	11 f4       	brne	.+4      	; 0x440 <__addsf3+0x1a>
 43c:	1e f4       	brtc	.+6      	; 0x444 <__addsf3+0x1e>
 43e:	c6 c0       	rjmp	.+396    	; 0x5cc <__fp_nan>
 440:	0e f4       	brtc	.+2      	; 0x444 <__addsf3+0x1e>
 442:	e0 95       	com	r30
 444:	e7 fb       	bst	r30, 7
 446:	bc c0       	rjmp	.+376    	; 0x5c0 <__fp_inf>

00000448 <__addsf3x>:
 448:	e9 2f       	mov	r30, r25
 44a:	e2 d0       	rcall	.+452    	; 0x610 <__fp_split3>
 44c:	80 f3       	brcs	.-32     	; 0x42e <__addsf3+0x8>
 44e:	ba 17       	cp	r27, r26
 450:	62 07       	cpc	r22, r18
 452:	73 07       	cpc	r23, r19
 454:	84 07       	cpc	r24, r20
 456:	95 07       	cpc	r25, r21
 458:	18 f0       	brcs	.+6      	; 0x460 <__addsf3x+0x18>
 45a:	71 f4       	brne	.+28     	; 0x478 <__addsf3x+0x30>
 45c:	9e f5       	brtc	.+102    	; 0x4c4 <__addsf3x+0x7c>
 45e:	fa c0       	rjmp	.+500    	; 0x654 <__fp_zero>
 460:	0e f4       	brtc	.+2      	; 0x464 <__addsf3x+0x1c>
 462:	e0 95       	com	r30
 464:	0b 2e       	mov	r0, r27
 466:	ba 2f       	mov	r27, r26
 468:	a0 2d       	mov	r26, r0
 46a:	0b 01       	movw	r0, r22
 46c:	b9 01       	movw	r22, r18
 46e:	90 01       	movw	r18, r0
 470:	0c 01       	movw	r0, r24
 472:	ca 01       	movw	r24, r20
 474:	a0 01       	movw	r20, r0
 476:	11 24       	eor	r1, r1
 478:	ff 27       	eor	r31, r31
 47a:	59 1b       	sub	r21, r25
 47c:	99 f0       	breq	.+38     	; 0x4a4 <__addsf3x+0x5c>
 47e:	59 3f       	cpi	r21, 0xF9	; 249
 480:	50 f4       	brcc	.+20     	; 0x496 <__addsf3x+0x4e>
 482:	50 3e       	cpi	r21, 0xE0	; 224
 484:	68 f1       	brcs	.+90     	; 0x4e0 <__addsf3x+0x98>
 486:	1a 16       	cp	r1, r26
 488:	f0 40       	sbci	r31, 0x00	; 0
 48a:	a2 2f       	mov	r26, r18
 48c:	23 2f       	mov	r18, r19
 48e:	34 2f       	mov	r19, r20
 490:	44 27       	eor	r20, r20
 492:	58 5f       	subi	r21, 0xF8	; 248
 494:	f3 cf       	rjmp	.-26     	; 0x47c <__addsf3x+0x34>
 496:	46 95       	lsr	r20
 498:	37 95       	ror	r19
 49a:	27 95       	ror	r18
 49c:	a7 95       	ror	r26
 49e:	f0 40       	sbci	r31, 0x00	; 0
 4a0:	53 95       	inc	r21
 4a2:	c9 f7       	brne	.-14     	; 0x496 <__addsf3x+0x4e>
 4a4:	7e f4       	brtc	.+30     	; 0x4c4 <__addsf3x+0x7c>
 4a6:	1f 16       	cp	r1, r31
 4a8:	ba 0b       	sbc	r27, r26
 4aa:	62 0b       	sbc	r22, r18
 4ac:	73 0b       	sbc	r23, r19
 4ae:	84 0b       	sbc	r24, r20
 4b0:	ba f0       	brmi	.+46     	; 0x4e0 <__addsf3x+0x98>
 4b2:	91 50       	subi	r25, 0x01	; 1
 4b4:	a1 f0       	breq	.+40     	; 0x4de <__addsf3x+0x96>
 4b6:	ff 0f       	add	r31, r31
 4b8:	bb 1f       	adc	r27, r27
 4ba:	66 1f       	adc	r22, r22
 4bc:	77 1f       	adc	r23, r23
 4be:	88 1f       	adc	r24, r24
 4c0:	c2 f7       	brpl	.-16     	; 0x4b2 <__addsf3x+0x6a>
 4c2:	0e c0       	rjmp	.+28     	; 0x4e0 <__addsf3x+0x98>
 4c4:	ba 0f       	add	r27, r26
 4c6:	62 1f       	adc	r22, r18
 4c8:	73 1f       	adc	r23, r19
 4ca:	84 1f       	adc	r24, r20
 4cc:	48 f4       	brcc	.+18     	; 0x4e0 <__addsf3x+0x98>
 4ce:	87 95       	ror	r24
 4d0:	77 95       	ror	r23
 4d2:	67 95       	ror	r22
 4d4:	b7 95       	ror	r27
 4d6:	f7 95       	ror	r31
 4d8:	9e 3f       	cpi	r25, 0xFE	; 254
 4da:	08 f0       	brcs	.+2      	; 0x4de <__addsf3x+0x96>
 4dc:	b3 cf       	rjmp	.-154    	; 0x444 <__addsf3+0x1e>
 4de:	93 95       	inc	r25
 4e0:	88 0f       	add	r24, r24
 4e2:	08 f0       	brcs	.+2      	; 0x4e6 <__addsf3x+0x9e>
 4e4:	99 27       	eor	r25, r25
 4e6:	ee 0f       	add	r30, r30
 4e8:	97 95       	ror	r25
 4ea:	87 95       	ror	r24
 4ec:	08 95       	ret

000004ee <__fixunssfsi>:
 4ee:	98 d0       	rcall	.+304    	; 0x620 <__fp_splitA>
 4f0:	88 f0       	brcs	.+34     	; 0x514 <__fixunssfsi+0x26>
 4f2:	9f 57       	subi	r25, 0x7F	; 127
 4f4:	90 f0       	brcs	.+36     	; 0x51a <__fixunssfsi+0x2c>
 4f6:	b9 2f       	mov	r27, r25
 4f8:	99 27       	eor	r25, r25
 4fa:	b7 51       	subi	r27, 0x17	; 23
 4fc:	a0 f0       	brcs	.+40     	; 0x526 <__fixunssfsi+0x38>
 4fe:	d1 f0       	breq	.+52     	; 0x534 <__fixunssfsi+0x46>
 500:	66 0f       	add	r22, r22
 502:	77 1f       	adc	r23, r23
 504:	88 1f       	adc	r24, r24
 506:	99 1f       	adc	r25, r25
 508:	1a f0       	brmi	.+6      	; 0x510 <__fixunssfsi+0x22>
 50a:	ba 95       	dec	r27
 50c:	c9 f7       	brne	.-14     	; 0x500 <__fixunssfsi+0x12>
 50e:	12 c0       	rjmp	.+36     	; 0x534 <__fixunssfsi+0x46>
 510:	b1 30       	cpi	r27, 0x01	; 1
 512:	81 f0       	breq	.+32     	; 0x534 <__fixunssfsi+0x46>
 514:	9f d0       	rcall	.+318    	; 0x654 <__fp_zero>
 516:	b1 e0       	ldi	r27, 0x01	; 1
 518:	08 95       	ret
 51a:	9c c0       	rjmp	.+312    	; 0x654 <__fp_zero>
 51c:	67 2f       	mov	r22, r23
 51e:	78 2f       	mov	r23, r24
 520:	88 27       	eor	r24, r24
 522:	b8 5f       	subi	r27, 0xF8	; 248
 524:	39 f0       	breq	.+14     	; 0x534 <__fixunssfsi+0x46>
 526:	b9 3f       	cpi	r27, 0xF9	; 249
 528:	cc f3       	brlt	.-14     	; 0x51c <__fixunssfsi+0x2e>
 52a:	86 95       	lsr	r24
 52c:	77 95       	ror	r23
 52e:	67 95       	ror	r22
 530:	b3 95       	inc	r27
 532:	d9 f7       	brne	.-10     	; 0x52a <__fixunssfsi+0x3c>
 534:	3e f4       	brtc	.+14     	; 0x544 <__fixunssfsi+0x56>
 536:	90 95       	com	r25
 538:	80 95       	com	r24
 53a:	70 95       	com	r23
 53c:	61 95       	neg	r22
 53e:	7f 4f       	sbci	r23, 0xFF	; 255
 540:	8f 4f       	sbci	r24, 0xFF	; 255
 542:	9f 4f       	sbci	r25, 0xFF	; 255
 544:	08 95       	ret

00000546 <__floatunsisf>:
 546:	e8 94       	clt
 548:	09 c0       	rjmp	.+18     	; 0x55c <__floatsisf+0x12>

0000054a <__floatsisf>:
 54a:	97 fb       	bst	r25, 7
 54c:	3e f4       	brtc	.+14     	; 0x55c <__floatsisf+0x12>
 54e:	90 95       	com	r25
 550:	80 95       	com	r24
 552:	70 95       	com	r23
 554:	61 95       	neg	r22
 556:	7f 4f       	sbci	r23, 0xFF	; 255
 558:	8f 4f       	sbci	r24, 0xFF	; 255
 55a:	9f 4f       	sbci	r25, 0xFF	; 255
 55c:	99 23       	and	r25, r25
 55e:	a9 f0       	breq	.+42     	; 0x58a <__floatsisf+0x40>
 560:	f9 2f       	mov	r31, r25
 562:	96 e9       	ldi	r25, 0x96	; 150
 564:	bb 27       	eor	r27, r27
 566:	93 95       	inc	r25
 568:	f6 95       	lsr	r31
 56a:	87 95       	ror	r24
 56c:	77 95       	ror	r23
 56e:	67 95       	ror	r22
 570:	b7 95       	ror	r27
 572:	f1 11       	cpse	r31, r1
 574:	f8 cf       	rjmp	.-16     	; 0x566 <__floatsisf+0x1c>
 576:	fa f4       	brpl	.+62     	; 0x5b6 <__floatsisf+0x6c>
 578:	bb 0f       	add	r27, r27
 57a:	11 f4       	brne	.+4      	; 0x580 <__floatsisf+0x36>
 57c:	60 ff       	sbrs	r22, 0
 57e:	1b c0       	rjmp	.+54     	; 0x5b6 <__floatsisf+0x6c>
 580:	6f 5f       	subi	r22, 0xFF	; 255
 582:	7f 4f       	sbci	r23, 0xFF	; 255
 584:	8f 4f       	sbci	r24, 0xFF	; 255
 586:	9f 4f       	sbci	r25, 0xFF	; 255
 588:	16 c0       	rjmp	.+44     	; 0x5b6 <__floatsisf+0x6c>
 58a:	88 23       	and	r24, r24
 58c:	11 f0       	breq	.+4      	; 0x592 <__floatsisf+0x48>
 58e:	96 e9       	ldi	r25, 0x96	; 150
 590:	11 c0       	rjmp	.+34     	; 0x5b4 <__floatsisf+0x6a>
 592:	77 23       	and	r23, r23
 594:	21 f0       	breq	.+8      	; 0x59e <__floatsisf+0x54>
 596:	9e e8       	ldi	r25, 0x8E	; 142
 598:	87 2f       	mov	r24, r23
 59a:	76 2f       	mov	r23, r22
 59c:	05 c0       	rjmp	.+10     	; 0x5a8 <__floatsisf+0x5e>
 59e:	66 23       	and	r22, r22
 5a0:	71 f0       	breq	.+28     	; 0x5be <__floatsisf+0x74>
 5a2:	96 e8       	ldi	r25, 0x86	; 134
 5a4:	86 2f       	mov	r24, r22
 5a6:	70 e0       	ldi	r23, 0x00	; 0
 5a8:	60 e0       	ldi	r22, 0x00	; 0
 5aa:	2a f0       	brmi	.+10     	; 0x5b6 <__floatsisf+0x6c>
 5ac:	9a 95       	dec	r25
 5ae:	66 0f       	add	r22, r22
 5b0:	77 1f       	adc	r23, r23
 5b2:	88 1f       	adc	r24, r24
 5b4:	da f7       	brpl	.-10     	; 0x5ac <__floatsisf+0x62>
 5b6:	88 0f       	add	r24, r24
 5b8:	96 95       	lsr	r25
 5ba:	87 95       	ror	r24
 5bc:	97 f9       	bld	r25, 7
 5be:	08 95       	ret

000005c0 <__fp_inf>:
 5c0:	97 f9       	bld	r25, 7
 5c2:	9f 67       	ori	r25, 0x7F	; 127
 5c4:	80 e8       	ldi	r24, 0x80	; 128
 5c6:	70 e0       	ldi	r23, 0x00	; 0
 5c8:	60 e0       	ldi	r22, 0x00	; 0
 5ca:	08 95       	ret

000005cc <__fp_nan>:
 5cc:	9f ef       	ldi	r25, 0xFF	; 255
 5ce:	80 ec       	ldi	r24, 0xC0	; 192
 5d0:	08 95       	ret

000005d2 <__fp_pscA>:
 5d2:	00 24       	eor	r0, r0
 5d4:	0a 94       	dec	r0
 5d6:	16 16       	cp	r1, r22
 5d8:	17 06       	cpc	r1, r23
 5da:	18 06       	cpc	r1, r24
 5dc:	09 06       	cpc	r0, r25
 5de:	08 95       	ret

000005e0 <__fp_pscB>:
 5e0:	00 24       	eor	r0, r0
 5e2:	0a 94       	dec	r0
 5e4:	12 16       	cp	r1, r18
 5e6:	13 06       	cpc	r1, r19
 5e8:	14 06       	cpc	r1, r20
 5ea:	05 06       	cpc	r0, r21
 5ec:	08 95       	ret

000005ee <__fp_round>:
 5ee:	09 2e       	mov	r0, r25
 5f0:	03 94       	inc	r0
 5f2:	00 0c       	add	r0, r0
 5f4:	11 f4       	brne	.+4      	; 0x5fa <__fp_round+0xc>
 5f6:	88 23       	and	r24, r24
 5f8:	52 f0       	brmi	.+20     	; 0x60e <__fp_round+0x20>
 5fa:	bb 0f       	add	r27, r27
 5fc:	40 f4       	brcc	.+16     	; 0x60e <__fp_round+0x20>
 5fe:	bf 2b       	or	r27, r31
 600:	11 f4       	brne	.+4      	; 0x606 <__fp_round+0x18>
 602:	60 ff       	sbrs	r22, 0
 604:	04 c0       	rjmp	.+8      	; 0x60e <__fp_round+0x20>
 606:	6f 5f       	subi	r22, 0xFF	; 255
 608:	7f 4f       	sbci	r23, 0xFF	; 255
 60a:	8f 4f       	sbci	r24, 0xFF	; 255
 60c:	9f 4f       	sbci	r25, 0xFF	; 255
 60e:	08 95       	ret

00000610 <__fp_split3>:
 610:	57 fd       	sbrc	r21, 7
 612:	90 58       	subi	r25, 0x80	; 128
 614:	44 0f       	add	r20, r20
 616:	55 1f       	adc	r21, r21
 618:	59 f0       	breq	.+22     	; 0x630 <__fp_splitA+0x10>
 61a:	5f 3f       	cpi	r21, 0xFF	; 255
 61c:	71 f0       	breq	.+28     	; 0x63a <__fp_splitA+0x1a>
 61e:	47 95       	ror	r20

00000620 <__fp_splitA>:
 620:	88 0f       	add	r24, r24
 622:	97 fb       	bst	r25, 7
 624:	99 1f       	adc	r25, r25
 626:	61 f0       	breq	.+24     	; 0x640 <__fp_splitA+0x20>
 628:	9f 3f       	cpi	r25, 0xFF	; 255
 62a:	79 f0       	breq	.+30     	; 0x64a <__fp_splitA+0x2a>
 62c:	87 95       	ror	r24
 62e:	08 95       	ret
 630:	12 16       	cp	r1, r18
 632:	13 06       	cpc	r1, r19
 634:	14 06       	cpc	r1, r20
 636:	55 1f       	adc	r21, r21
 638:	f2 cf       	rjmp	.-28     	; 0x61e <__fp_split3+0xe>
 63a:	46 95       	lsr	r20
 63c:	f1 df       	rcall	.-30     	; 0x620 <__fp_splitA>
 63e:	08 c0       	rjmp	.+16     	; 0x650 <__fp_splitA+0x30>
 640:	16 16       	cp	r1, r22
 642:	17 06       	cpc	r1, r23
 644:	18 06       	cpc	r1, r24
 646:	99 1f       	adc	r25, r25
 648:	f1 cf       	rjmp	.-30     	; 0x62c <__fp_splitA+0xc>
 64a:	86 95       	lsr	r24
 64c:	71 05       	cpc	r23, r1
 64e:	61 05       	cpc	r22, r1
 650:	08 94       	sec
 652:	08 95       	ret

00000654 <__fp_zero>:
 654:	e8 94       	clt

00000656 <__fp_szero>:
 656:	bb 27       	eor	r27, r27
 658:	66 27       	eor	r22, r22
 65a:	77 27       	eor	r23, r23
 65c:	cb 01       	movw	r24, r22
 65e:	97 f9       	bld	r25, 7
 660:	08 95       	ret

00000662 <__mulsf3>:
 662:	0a d0       	rcall	.+20     	; 0x678 <__mulsf3x>
 664:	c4 cf       	rjmp	.-120    	; 0x5ee <__fp_round>
 666:	b5 df       	rcall	.-150    	; 0x5d2 <__fp_pscA>
 668:	28 f0       	brcs	.+10     	; 0x674 <__mulsf3+0x12>
 66a:	ba df       	rcall	.-140    	; 0x5e0 <__fp_pscB>
 66c:	18 f0       	brcs	.+6      	; 0x674 <__mulsf3+0x12>
 66e:	95 23       	and	r25, r21
 670:	09 f0       	breq	.+2      	; 0x674 <__mulsf3+0x12>
 672:	a6 cf       	rjmp	.-180    	; 0x5c0 <__fp_inf>
 674:	ab cf       	rjmp	.-170    	; 0x5cc <__fp_nan>
 676:	ef cf       	rjmp	.-34     	; 0x656 <__fp_szero>

00000678 <__mulsf3x>:
 678:	cb df       	rcall	.-106    	; 0x610 <__fp_split3>
 67a:	a8 f3       	brcs	.-22     	; 0x666 <__mulsf3+0x4>

0000067c <__mulsf3_pse>:
 67c:	99 23       	and	r25, r25
 67e:	d9 f3       	breq	.-10     	; 0x676 <__mulsf3+0x14>
 680:	55 23       	and	r21, r21
 682:	c9 f3       	breq	.-14     	; 0x676 <__mulsf3+0x14>
 684:	95 0f       	add	r25, r21
 686:	50 e0       	ldi	r21, 0x00	; 0
 688:	55 1f       	adc	r21, r21
 68a:	aa 27       	eor	r26, r26
 68c:	ee 27       	eor	r30, r30
 68e:	ff 27       	eor	r31, r31
 690:	bb 27       	eor	r27, r27
 692:	00 24       	eor	r0, r0
 694:	08 94       	sec
 696:	67 95       	ror	r22
 698:	20 f4       	brcc	.+8      	; 0x6a2 <__mulsf3_pse+0x26>
 69a:	e2 0f       	add	r30, r18
 69c:	f3 1f       	adc	r31, r19
 69e:	b4 1f       	adc	r27, r20
 6a0:	0a 1e       	adc	r0, r26
 6a2:	22 0f       	add	r18, r18
 6a4:	33 1f       	adc	r19, r19
 6a6:	44 1f       	adc	r20, r20
 6a8:	aa 1f       	adc	r26, r26
 6aa:	66 95       	lsr	r22
 6ac:	a9 f7       	brne	.-22     	; 0x698 <__mulsf3_pse+0x1c>
 6ae:	77 95       	ror	r23
 6b0:	30 f4       	brcc	.+12     	; 0x6be <__mulsf3_pse+0x42>
 6b2:	f3 0f       	add	r31, r19
 6b4:	b4 1f       	adc	r27, r20
 6b6:	0a 1e       	adc	r0, r26
 6b8:	12 1e       	adc	r1, r18
 6ba:	08 f4       	brcc	.+2      	; 0x6be <__mulsf3_pse+0x42>
 6bc:	63 95       	inc	r22
 6be:	33 0f       	add	r19, r19
 6c0:	44 1f       	adc	r20, r20
 6c2:	aa 1f       	adc	r26, r26
 6c4:	22 1f       	adc	r18, r18
 6c6:	76 95       	lsr	r23
 6c8:	99 f7       	brne	.-26     	; 0x6b0 <__mulsf3_pse+0x34>
 6ca:	87 95       	ror	r24
 6cc:	20 f4       	brcc	.+8      	; 0x6d6 <__mulsf3_pse+0x5a>
 6ce:	b4 0f       	add	r27, r20
 6d0:	0a 1e       	adc	r0, r26
 6d2:	12 1e       	adc	r1, r18
 6d4:	63 1f       	adc	r22, r19
 6d6:	44 0f       	add	r20, r20
 6d8:	aa 1f       	adc	r26, r26
 6da:	22 1f       	adc	r18, r18
 6dc:	33 1f       	adc	r19, r19
 6de:	86 95       	lsr	r24
 6e0:	a9 f7       	brne	.-22     	; 0x6cc <__mulsf3_pse+0x50>
 6e2:	86 2f       	mov	r24, r22
 6e4:	71 2d       	mov	r23, r1
 6e6:	60 2d       	mov	r22, r0
 6e8:	11 24       	eor	r1, r1
 6ea:	9f 57       	subi	r25, 0x7F	; 127
 6ec:	50 40       	sbci	r21, 0x00	; 0
 6ee:	8a f0       	brmi	.+34     	; 0x712 <__mulsf3_pse+0x96>
 6f0:	e1 f0       	breq	.+56     	; 0x72a <__mulsf3_pse+0xae>
 6f2:	88 23       	and	r24, r24
 6f4:	4a f0       	brmi	.+18     	; 0x708 <__mulsf3_pse+0x8c>
 6f6:	ee 0f       	add	r30, r30
 6f8:	ff 1f       	adc	r31, r31
 6fa:	bb 1f       	adc	r27, r27
 6fc:	66 1f       	adc	r22, r22
 6fe:	77 1f       	adc	r23, r23
 700:	88 1f       	adc	r24, r24
 702:	91 50       	subi	r25, 0x01	; 1
 704:	50 40       	sbci	r21, 0x00	; 0
 706:	a9 f7       	brne	.-22     	; 0x6f2 <__mulsf3_pse+0x76>
 708:	9e 3f       	cpi	r25, 0xFE	; 254
 70a:	51 05       	cpc	r21, r1
 70c:	70 f0       	brcs	.+28     	; 0x72a <__mulsf3_pse+0xae>
 70e:	58 cf       	rjmp	.-336    	; 0x5c0 <__fp_inf>
 710:	a2 cf       	rjmp	.-188    	; 0x656 <__fp_szero>
 712:	5f 3f       	cpi	r21, 0xFF	; 255
 714:	ec f3       	brlt	.-6      	; 0x710 <__mulsf3_pse+0x94>
 716:	98 3e       	cpi	r25, 0xE8	; 232
 718:	dc f3       	brlt	.-10     	; 0x710 <__mulsf3_pse+0x94>
 71a:	86 95       	lsr	r24
 71c:	77 95       	ror	r23
 71e:	67 95       	ror	r22
 720:	b7 95       	ror	r27
 722:	f7 95       	ror	r31
 724:	e7 95       	ror	r30
 726:	9f 5f       	subi	r25, 0xFF	; 255
 728:	c1 f7       	brne	.-16     	; 0x71a <__mulsf3_pse+0x9e>
 72a:	fe 2b       	or	r31, r30
 72c:	88 0f       	add	r24, r24
 72e:	91 1d       	adc	r25, r1
 730:	96 95       	lsr	r25
 732:	87 95       	ror	r24
 734:	97 f9       	bld	r25, 7
 736:	08 95       	ret

00000738 <_exit>:
 738:	f8 94       	cli

0000073a <__stop_program>:
 73a:	ff cf       	rjmp	.-2      	; 0x73a <__stop_program>
